For cs, the program searches the already arrived processes every time., and swaps the process with the smallest remaining job time to the head. As the method only searches the arrived processes, it follows the simulating processesâ€™ arrival rule. It performs better when processes comes earlier has larger job time, which avoids the problem of a large job time process tucks the memory, causes the later processes wait for long time to run. However, if the processes arriving in sorted job time, this method will not work, and will worse the actual program running time to O(n^2) since it is an O(n) inside of a loop.
For cm, similar to cs, the program first sorts the arrived processes, and swap the process with the smallest memory size to the head to avoid high occupation of memory. When evict needed, it evicts the least frequently used pages, this reduces the risk of page fault and penalty, and since it can run with 4 pages, it uses pages more efficiently than swapping, so that causes not only smaller turnaround time, but also smaller makespan. However, a just frequently used page may not still use frequently later, may cause wrong eviction.